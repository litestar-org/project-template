[tool.poetry]
name = "project-template"
version = "1.0.0"
description = "template-project is a Python template project designed to simplify the setup of a new project."

authors = [
    "Na'aman Hirschfeld <nhirschfeld@gmail.com>",
    "Peter Schutt <peter.github@proton.me>",
    "Cody Fincher <cody.fincher@gmail.com>",
    "Janek Nouvertné <provinzkraut@posteo.de>",
    "Jacob Coffee <jacob@z7x.org>",
]
maintainers = [
    "Na'aman Hirschfeld <nhirschfeld@gmail.com>",
    "Peter Schutt <peter.github@proton.me>",
    "Cody Fincher <cody.fincher@gmail.com>",
    "Janek Nouvertné <provinzkraut@posteo.de>",
    "Jacob Coffee <jacob@z7x.org>",
]
license = "MIT"
homepage = "https://litestar.dev/"
repository = "https://github.com/litestar-org/project-template"
documentation = "https://docs.litestar.dev/"
keywords = [
    "api",
    "rest",
    "http",
    "asgi",
    "pydantic",
    "litestar",
    "starlite",
    "framework",
    "websocket",
    "litestar",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
]
packages = [{ include = "src" }]

[tool.poetry.urls]
"Issue Tracker" = "https://github.com/litestar-org/project-template/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc"
"Changelog" = "https://github.com/litestar-org/project-template/releases/"
"Twitter" = "https://twitter.com/LitestarAPI"
"Reddit" = "https://www.reddit.com/r/litestarapi"
"Discord" = "https://discord.gg/MmcwxztmQb"
"Blog" = "https://blog.litestar.dev"

[tool.poetry.dependencies]
python = ">=3.8,<4.0"
litestar = { extras = ["standard"], version = "*" }

[tool.poetry.group.dev.dependencies]
pre-commit = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
auto-pytabs = { extras = ["sphinx"], version = "*" }
black = "*"
httpx = "*"
sphinx = ">=5.3.0,<=6"
sphinx-autobuild = "*"
sphinx-copybutton = ">=0.5.1"
sphinx-design = ">=0.3.0,<1"
sphinxcontrib-mermaid = ">=0.8.1,<1"
litestar-sphinx-theme = { git = "https://github.com/litestar-org/litestar-sphinx-theme.git" }
uvicorn = "*"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
black = "*"
blacken-docs = "*"
mypy = "*"
pyright = "*"
ruff = '*'

[tool.poetry.extras]

[tool.poetry.scripts]

litestar = { callable = "litestar:__main__", extras = ["cli"] }

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
include = '\.pyi?$'

[tool.codespell]
ignore-words-list = "selectin"
skip = 'poetry.lock'

[tool.coverage.run]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    'pragma: no cover',
    'if TYPE_CHECKING:',
    'raise NotImplementedError',
]

[tool.pytest.ini_options]
# addopts = "--ignore=examples"
asyncio_mode = "auto"

[tool.pyright]
include = ["src"]
exclude = ["tools"]

[tool.slotscheck]
strict-imports = false

[tool.ruff]
select = [
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    "C90", # mccabe
    "D", # pydocstyle
    "DJ", # flake8-django
    "DTZ", # flake8-datetimez
    "E", # pycodestyle errors
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F", # pyflakes
    "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    "PIE", # flake8-pie
    "PLC", # pylint - convention
    "PLE", # pylint - error
    "PLW", # pylint - warning
    "PTH", # flake8-use-pathlib
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "W", # pycodestyle - warning
    "YTT", # flake8-2020
]

ignore = [
    "A003", # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B010", # flake8-bugbear - do not call setattr with a constant attribute value
    "D100", # pydocstyle - missing docstring in public module
    "D101", # pydocstyle - missing docstring in public class
    "D102", # pydocstyle - missing docstring in public method
    "D103", # pydocstyle - missing docstring in public function
    "D104", # pydocstyle - missing docstring in public package
    "D105", # pydocstyle - missing docstring in magic method
    "D106", # pydocstyle - missing docstring in public nested class
    "D107", # pydocstyle - missing docstring in __init__
    "D202", # pydocstyle - no blank lines allowed after function docstring
    "D205", # pydocstyle - 1 blank line required between summary line and description
    "D415", # pydocstyle - first line should end with a period, question mark, or exclamation point
    "E501", # pycodestyle line too long, handled by black
    "PLW2901"  # pylint - for loop variable overwritten by assignment target
]
line-length = 120
src = ["src", "tests", "docs/examples"]
target-version = "py38"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.pep8-naming]
classmethod-decorators = [
    "classmethod",
]

[tool.ruff.isort]
known-first-party = ["litestar", "tests", "examples"]

[tool.ruff.per-file-ignores]
"tests/**/*.*" = [
    "A",
    "ARG",
    "B",
    "BLE",
    "C901",
    "D",
    "DTZ",
    "EM",
    "FBT",
    "G",
    "N",
    "PGH",
    "PIE",
    "PLR",
    "PLW",
    "PTH",
    "RSE",
    "S",
    "S101",
    "SIM",
    "TCH",
    "TRY",
]
"docs/examples/tests/**/*.*" = [
    "A",
    "ARG",
    "B",
    "BLE",
    "C901",
    "D",
    "DTZ",
    "EM",
    "FBT",
    "G",
    "N",
    "PGH",
    "PIE",
    "PLR",
    "PLW",
    "PTH",
    "RSE",
    "S",
    "S101",
    "SIM",
    "TCH",
    "TRY",
]
"docs/**/*.*" = ["S", "B", "DTZ", "A", "TCH", "ERA", "D", "RET"]
"tools/**/*.*" = ["D", "ARG", "EM", "TRY", "G", "FBT"]
