[tool.poetry]
name = "PROJECT_TEMPLATE"
version = "1.0.0"
description = ""
authors = []
maintainers = []
license = "MIT"
keywords = ["starlite"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
]
include = ["CHANGELOG.md"]
packages = [
    { include = "src" },
]

[tool.poetry.dependencies]
python = ">=3.8, <4.0"

[tool.poetry.dev-dependencies]
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
pre-commit = "*"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
black = "^23.1.0"
sphinx = "^6.1.3"
sphinx-autobuild = "^2021.3.14"
auto-pytabs = "^0.2.0"
sphinxcontrib-mermaid = "^0.8.1"
sphinx-copybutton = "^0.5.1"
starlite-sphinx-theme = { git = "https://github.com/starlite-api/starlite-sphinx-theme.git" }

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
include = '\.pyi?$'

[tool.coverage.run]
omit = ["*/tests/*"]

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.pyright]
include = ["src", "tests"]
exclude = []

[tool.slotscheck]
strict-imports = false

[tool.ruff]
select = [
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    "C90", # mccabe
    "D", # pydocstyle
    "DJ", # flake8-django
    "DTZ", # flake8-datetimez
    "E", # pycodestyle errors
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F", # pyflakes
    "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    "PIE", # flake8-pie
    "PLC", # pylint - convention
    "PLE", # pylint - error
    "PLW", # pylint - warning
    "PTH", # flake8-use-pathlib
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "W", # pycodestyle - warning
    "YTT", # flake8-2020
]
ignore = [
    "E501", # pycodestyle line too long, handled by black
    "D100", # pydocstyle - missing docstring in public module
    "D101", # pydocstyle - missing docstring in public class
    "D102", # pydocstyle - missing docstring in public method
    "D103", # pydocstyle - missing docstring in public function
    "D104", # pydocstyle - missing docstring in public package
    "D105", # pydocstyle - missing docstring in magic method
    "D106", # pydocstyle - missing docstring in public nested class
    "D107", # pydocstyle - missing docstring in __init__
    "D202", # pydocstyle - no blank lines allowed after function docstring
    "D205", # pydocstyle - 1 blank line required between summary line and description
    "D415", # pydocstyle - first line should end with a period, question mark, or exclamation point
    "UP037", # pyupgrade - removes quotes from type annotation
    "A003", # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B010" # flake8-bugbear - do not call setattr with a constant attribute value
]
line-length = 120
src = ["src", "tests"]
target-version = "py311"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
known-first-party = ["PROJECT_TEMPLATE", "tests"]

[tool.ruff.per-file-ignores]
"tests/**/*.*" = ["S101", "D", "ARG", "PGH", "B", "FBT", "PTH", "A", "TCH", "DTZ", "TRY", "EM", "S", "N", "SIM", "PLR", "BLE", "RSE", "C901", "PLW", "G", "PIE"]
"docs/examples/tests/**/*.*" = ["S101", "D", "ARG", "PGH", "B", "FBT", "PTH", "A", "TCH", "DTZ", "TRY", "EM", "S", "N", "SIM", "PLR", "BLE", "RSE", "C901", "PLW", "G", "PIE"]
"docs/**/*.*" = ["S", "B", "DTZ", "A", "TCH", "ERA", "D", "RET"]

[tool.codespell]
skip = '*docs/*'
